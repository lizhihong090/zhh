<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

	<!-- 数据源配置文件读取 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:dao.properties" />
		<property name="ignoreUnresolvablePlaceholders" value="true"></property>
	</bean>

	<!-- ===========================================配置数据源=========================================== -->
	<!-- druid连接池 -->
	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
		<!-- 慢sql日志记录 -->
		<property name="slowSqlMillis" value="5000" /> <!-- 5s -->
		<property name="logSlowSql" value="true" />	<!-- 日志记录 -->
	</bean>

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />
		<property name="filters" value="${jdbc.filters}" />
		<!-- 最大连接数(默认20个),超过了这个连接数,再有请求时,就排在队列中等候,最大的等待请求数由maximum-new-connections决定 -->
		<property name="maxActive" value="${jdbc.maxActive}" />
		<!-- 最小连接数 -->
		<property name="minIdle" value="${jdbc.minIdle}" />
		<!-- 初始化大小(默认1个) -->
		<property name="initialSize" value="${jdbc.initialSize}" />
		<!-- 保存监控记录 -->
		<property name="timeBetweenLogStatsMillis" value="300000" />
		<property name="proxyFilters">
			<list>
				<ref bean="stat-filter" />
			</list>
		</property>
		<!--用来检测连接是否有效的sql -->
		<property name="validationQuery" value="${jdbc.validationQuery}" />
		<!--如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效 -->
		<property name="testWhileIdle" value="${jdbc.testWhileIdle}" />
		<!--自动侦察各个连接状态的时间间隔(毫秒) -->
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
	</bean>

	<!-- ==========================================配置mybatis======================================================= -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--注入数据库连接池 -->
		<property name="dataSource" ref="dataSource" />
		<!--配置mybatis全局配置文件:mybatis-config.xml -->
		<property name="configLocation" value="classpath:mybatis-config.xml" />

		<!--扫描entity包,使用别名,多个用;隔开 -->
		<!-- com.iquantex.web.framework.model为框架部分 -->
		<!-- com.iquantex.auth.model为子系统部分 -->
		<property name="typeAliasesPackage"
			value="com.ngdp.model" />

		<!--扫描sql配置文件:mapper需要的xml文件 -->
		<property name="mapperLocations">
			<list>
				<!-- 框架部分 -->
				<!-- <value>classpath:com/iquantex/web/framework/dao/basexml/*.xml
				</value>
				<value>classpath:com/iquantex/web/framework/dao/xml/*.xml</value> -->
				<!-- 各个子系统 -->
				<value>classpath:com/ngdp/dao/basexml/*.xml</value>
				<value>classpath:com/ngdp/dao/xml/*.xml</value>


			</list>
		</property>
		<!-- 分页配置 -->
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageInterceptor">
					<!-- 这里的几个配置主要演示如何使用，如果不理解，一定要去掉下面的配置 -->
					<property name="properties">
						<value>
							<!-- 分页合理化参数，默认值为false。当该参数设置为 true 时，pageNum<=0 时会查询第一页， pageNum>pages（超过总数时），会查询最后一页。默认false 
								时，直接根据参数进行查询。 -->
							reasonable=true
							<!-- 支持通过 Mapper 接口参数来传递分页参数，默认值false，分页插件会从查询方法的参数值中，自动根据上面 params 
								配置的字段中取值，查找到合适的值时就会自动分页。 -->
							supportMethodsArguments=true
							<!-- 为了支持startPage(Object params)方法，增加了该参数来配置参数映射，用于从对象中根据属性名取值， 可以配置 
								pageNum,pageSize,count,pageSizeZero,reasonable，不配置映射的用默认值， 默认值为pageNum=pageNum;pageSize=pageSize;count=countSql;reasonable=reasonable;pageSizeZero=pageSizeZero。 -->
							params=count=countSql
							<!-- 允许在运行时根据多数据源自动识别对应方言的分页 -->
							autoRuntimeDialect=true
						</value>
					</property>
				</bean>

			</array>

		</property>
	</bean>

	<!-- 配置扫描Dao接口包,动态实现DAO接口,注入到spring容器 -->
	<bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
		<!--注入SqlSessionFactory -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<!-- 给出需要扫描的Dao接口 -->
		<!-- com.iquantex.web.framework.dao.java为框架部分 -->
		<!-- com.iquantex.auth.dao.java为子系统部分 -->
		<property name="basePackage"
			value="com.ngdp.dao.java" />
		<property name="properties">
			<value>
				ORDER=BEFORE
			</value>
		</property>
	</bean>

	<!-- ============================ 添加注解式事务 ================================= -->
	<!-- 配置spring的PlatformTransactionManager，名字为默认值 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 开启事务控制的注解支持 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

</beans>
